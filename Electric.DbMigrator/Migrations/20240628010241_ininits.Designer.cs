// <auto-generated />
using System;
using Electric.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Electric.DbMigrator.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240628010241_ininits")]
    partial class ininits
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Electric.Entity.AuditLogs.EleAuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("API接口地址");

                    b.Property<int>("AuditLogType")
                        .HasColumnType("int")
                        .HasComment("日志类型 0:正常日志记录，99：异常日志");

                    b.Property<string>("BrowserInfo")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasComment("浏览器信息");

                    b.Property<string>("ClientIpAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("客户端IP");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasComment("详细异常");

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasComment("异常信息");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasComment("执行时间");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后编辑时间");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("接口的方法");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasComment("参数");

                    b.Property<string>("ReturnValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("返回结果");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogType");

                    b.ToTable("EleAuditLog");
                });

            modelBuilder.Entity("Electric.Entity.EleRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("EleRoleClaim", (string)null);
                });

            modelBuilder.Entity("Electric.Entity.EleUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EleUserClaim", (string)null);
                });

            modelBuilder.Entity("Electric.Entity.EleUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("EleUserLogin", (string)null);
                });

            modelBuilder.Entity("Electric.Entity.EleUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EleUserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Electric.Entity.EleUserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("EleUserToken", (string)null);
                });

            modelBuilder.Entity("Electric.Entity.Permissions.ElePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApiMethod")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasComment("API方法：GET、PUT、POST、DELETE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("权限编码");

                    b.Property<string>("Component")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("Vue页面组件");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("图标");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后编辑时间");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("权限名称");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasComment("父菜单Id");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int")
                        .HasComment("菜单类型,0：菜单权限、元素权限、Api权限、数据权限");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("备注");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("状态，0：禁用，1：正常");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("Url地址");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("Sort");

                    b.ToTable("ElePermission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApiMethod = "",
                            Code = "system",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8739),
                            CreatorId = 0L,
                            Icon = "el-icon-s-tools",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "系统管理",
                            ParentId = 0L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "system"
                        },
                        new
                        {
                            Id = 2L,
                            ApiMethod = "",
                            Code = "system.user",
                            Component = "views/documentation/index",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8757),
                            CreatorId = 0L,
                            Icon = "el-icon-user-solid",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "用户管理",
                            ParentId = 1L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "system.user"
                        },
                        new
                        {
                            Id = 3L,
                            ApiMethod = "",
                            Code = "system.role",
                            Component = "views/documentation/index",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8759),
                            CreatorId = 0L,
                            Icon = "peoples",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "角色管理",
                            ParentId = 1L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "role"
                        },
                        new
                        {
                            Id = 4L,
                            ApiMethod = "",
                            Code = "system.permission",
                            Component = "views/documentation/index",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8761),
                            CreatorId = 0L,
                            Icon = "list",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "菜单管理",
                            ParentId = 1L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "permission"
                        },
                        new
                        {
                            Id = 5L,
                            ApiMethod = "",
                            Code = "system.rolepermission",
                            Component = "views/documentation/index",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8762),
                            CreatorId = 0L,
                            Icon = "example",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "角色权限",
                            ParentId = 1L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "rolepermission"
                        },
                        new
                        {
                            Id = 16L,
                            ApiMethod = "",
                            Code = "log.auditlog",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8772),
                            CreatorId = 0L,
                            Icon = "bug",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "日志管理",
                            ParentId = 0L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "log"
                        },
                        new
                        {
                            Id = 6L,
                            ApiMethod = "",
                            Code = "system.user.add",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8774),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "添加",
                            ParentId = 2L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 7L,
                            ApiMethod = "",
                            Code = "system.user.edit",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8775),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "编辑",
                            ParentId = 2L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 8L,
                            ApiMethod = "",
                            Code = "system.user.delete",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8777),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "删除",
                            ParentId = 2L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 9L,
                            ApiMethod = "",
                            Code = "system.role.add",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8780),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "添加",
                            ParentId = 3L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 10L,
                            ApiMethod = "",
                            Code = "system.role.edit",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8781),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "编辑",
                            ParentId = 3L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 11L,
                            ApiMethod = "",
                            Code = "system.role.delete",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8783),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "删除",
                            ParentId = 3L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 12L,
                            ApiMethod = "",
                            Code = "system.permission.add",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8785),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "添加",
                            ParentId = 4L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 13L,
                            ApiMethod = "",
                            Code = "system.permission.edit",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8787),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "编辑",
                            ParentId = 4L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 14L,
                            ApiMethod = "",
                            Code = "system.permission.delete",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8789),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "删除",
                            ParentId = 4L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        },
                        new
                        {
                            Id = 15L,
                            ApiMethod = "",
                            Code = "system.rolepermission.update",
                            Component = "",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8790),
                            CreatorId = 0L,
                            Icon = "",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "更新",
                            ParentId = 5L,
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1,
                            Url = ""
                        });
                });

            modelBuilder.Entity("Electric.Entity.Roles.EleRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后编辑时间");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("备注");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("状态，0：禁用，1：正常");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("EleRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 56, DateTimeKind.Local).AddTicks(5157),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "管理员",
                            NormalizedName = "管理员",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Electric.Entity.Roles.EleRolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后编辑时间");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("EleRolePermission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8925),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8930),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 2L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8931),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 3L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8932),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 4L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8932),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 5L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 16L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8934),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 16L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8935),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 6L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8935),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 7L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8936),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 8L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8937),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 9L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8938),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 10L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8939),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 11L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8939),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 12L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 13L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8940),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 13L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 14L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8941),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 14L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 15L,
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 131, DateTimeKind.Local).AddTicks(8941),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = 15L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Electric.Entity.Users.EleUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后编辑时间");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("EleUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eccef0d5-4418-4a9d-9e1a-0fc91932d973",
                            CreationTime = new DateTime(2024, 6, 28, 9, 2, 41, 56, DateTimeKind.Local).AddTicks(5473),
                            CreatorId = 0L,
                            Email = "admin@eletric.com",
                            EmailConfirmed = true,
                            FullName = "管理员",
                            LastModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ELETRIC.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGqG7+m9cCqhZqjTLOEjoelzjw4ZDgFVGKgjIB6oaJJUs+HvleOrfUNJfxlHDctVRg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abc",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Electric.Entity.EleRoleClaim", b =>
                {
                    b.HasOne("Electric.Entity.Roles.EleRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Entity.EleUserClaim", b =>
                {
                    b.HasOne("Electric.Entity.Users.EleUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Entity.EleUserLogin", b =>
                {
                    b.HasOne("Electric.Entity.Users.EleUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Entity.EleUserRole", b =>
                {
                    b.HasOne("Electric.Entity.Roles.EleRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Electric.Entity.Users.EleUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Entity.EleUserToken", b =>
                {
                    b.HasOne("Electric.Entity.Users.EleUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Entity.Roles.EleRolePermission", b =>
                {
                    b.HasOne("Electric.Entity.Permissions.ElePermission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Electric.Entity.Roles.EleRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
